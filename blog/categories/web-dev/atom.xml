<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web-dev | BootDB]]></title>
  <link href="http://www.bootdb.com/blog/categories/web-dev/atom.xml" rel="self"/>
  <link href="http://www.bootdb.com/"/>
  <updated>2017-02-06T11:37:11+05:30</updated>
  <id>http://www.bootdb.com/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sprintf Equivalent in Javascript]]></title>
    <link href="http://www.bootdb.com/sprintf-equivalent-javascript/"/>
    <updated>2016-12-12T20:08:52+05:30</updated>
    <id>http://www.bootdb.com/sprintf-equivalent-javascript</id>
    <content type="html"><![CDATA[<p>Below are the two methods by which we can emulate sprintf in Javascript directly to console.log and String.format:</p>

<p>console.log approach:</p>

<pre><code>(function() {

    var logger = console.log;

    console.log = function() {

        var format = function(str, args) {
            logger(args);
            return str.replace(/{(\d+)}/g, function(match, number) {
                return typeof args[number] != 'undefined' ? args[number] : match;
            });
        };
        var inputs = Array.prototype.slice.call(arguments);
        logger(format(inputs.shift(), inputs));
    }

})()

console.log("Hello {1}", 10, 100);&lt;/pre&gt;
&lt;p&gt;&lt;/p&gt;


String.format approach:


    if (!String.prototype.format) {
      String.prototype.format = function() {
        var args = arguments;
        return this.replace(/{(\d+)}/g, function(match, number) { 
          return typeof args[number] != 'undefined'
            ? args[number]
            : match
          ;
        });
      };
    }
    "{0} is dead, but {1} is alive! {0} {2}".format("ASP", "ASP.NET");
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Trigger Event on Pressing Enter Key in AngularJS]]></title>
    <link href="http://www.bootdb.com/trigger-event-on-pressing-enter-key-angularjs/"/>
    <updated>2016-12-12T20:05:35+05:30</updated>
    <id>http://www.bootdb.com/trigger-event-on-pressing-enter-key-angularjs</id>
    <content type="html"><![CDATA[<p>Use the below directive which triggers a function when enter / return key is pressed:</p>

<pre><code>.directive('ngEnter', function () {
    return function (scope, element, attrs) {
        element.bind("keydown keypress", function (event) {
            if (event.which === 13) {
                scope.$apply(function () {
                    scope.$eval(attrs.ngEnter);
                });
                event.preventDefault();
            }
        });
    };
});
</code></pre>

<p>Usage:</p>

<pre><code>&lt;input ng-model="input" ng-enter="enterTriggered"&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Emit a Event When Ng-repeat Is Completed AngularJS]]></title>
    <link href="http://www.bootdb.com/emit-event-ng-repeat-completed/"/>
    <updated>2016-12-12T20:03:09+05:30</updated>
    <id>http://www.bootdb.com/emit-event-ng-repeat-completed</id>
    <content type="html"><![CDATA[<p>Use a directive with ng-repeat which triggers a function when ng-repeat reaches to last element, directive code:</p>

<pre><code>.directive('onFinishEmit', function($timeout) {
    return {
        restrict: 'A',       
        link: function(scope, element, attr) {
            if (scope.$last === true) {
                $timeout(function() {                        
                    scope.$emit(attr.onFinishEmit);
                });
            }
        }
    }
});
</code></pre>

<p>Usage:</p>

<pre><code>&lt;div ng-repeat="data in dataset" on-finish-emit="renderComplete"&gt;
  
&lt;/div&gt;
</code></pre>
]]></content>
  </entry>
  
</feed>
